/* tslint:disable */
/* eslint-disable */
/**
 * Retirement‐Matching API
 * REST endpoints for user auth (via magic‐link), retirees, career elements, reference data, startups, job postings, matching, conversations, and hire invites. Uses a JWT set in a cookie. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserPublicSummary } from './UserPublicSummary';
import {
    UserPublicSummaryFromJSON,
    UserPublicSummaryFromJSONTyped,
    UserPublicSummaryToJSON,
    UserPublicSummaryToJSONTyped,
} from './UserPublicSummary';
import type { JobPosting } from './JobPosting';
import {
    JobPostingFromJSON,
    JobPostingFromJSONTyped,
    JobPostingToJSON,
    JobPostingToJSONTyped,
} from './JobPosting';
import type { Message } from './Message';
import {
    MessageFromJSON,
    MessageFromJSONTyped,
    MessageToJSON,
    MessageToJSONTyped,
} from './Message';

/**
 * 
 * @export
 * @interface ConversationSummary
 */
export interface ConversationSummary {
    /**
     * Unique identifier for this conversation.
     * @type {string}
     * @memberof ConversationSummary
     */
    id: string;
    /**
     * When the conversation was created.
     * @type {Date}
     * @memberof ConversationSummary
     */
    createdAt: Date;
    /**
     * 
     * @type {JobPosting}
     * @memberof ConversationSummary
     */
    jobPosting?: JobPosting;
    /**
     * Unique identifier for the participating retiree.
     * @type {Array<UserPublicSummary>}
     * @memberof ConversationSummary
     */
    participants: Array<UserPublicSummary>;
    /**
     * Number of unread messages in this conversation.
     * @type {number}
     * @memberof ConversationSummary
     */
    unreadMessageCount: number;
    /**
     * 
     * @type {Message}
     * @memberof ConversationSummary
     */
    lastMessage?: Message;
}

/**
 * Check if a given object implements the ConversationSummary interface.
 */
export function instanceOfConversationSummary(value: object): value is ConversationSummary {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('participants' in value) || value['participants'] === undefined) return false;
    if (!('unreadMessageCount' in value) || value['unreadMessageCount'] === undefined) return false;
    return true;
}

export function ConversationSummaryFromJSON(json: any): ConversationSummary {
    return ConversationSummaryFromJSONTyped(json, false);
}

export function ConversationSummaryFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConversationSummary {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['_id'],
        'createdAt': (new Date(json['createdAt'])),
        'jobPosting': json['jobPosting'] == null ? undefined : JobPostingFromJSON(json['jobPosting']),
        'participants': ((json['participants'] as Array<any>).map(UserPublicSummaryFromJSON)),
        'unreadMessageCount': json['unreadMessageCount'],
        'lastMessage': json['lastMessage'] == null ? undefined : MessageFromJSON(json['lastMessage']),
    };
}

export function ConversationSummaryToJSON(json: any): ConversationSummary {
    return ConversationSummaryToJSONTyped(json, false);
}

export function ConversationSummaryToJSONTyped(value?: ConversationSummary | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        '_id': value['id'],
        'createdAt': ((value['createdAt']).toISOString()),
        'jobPosting': JobPostingToJSON(value['jobPosting']),
        'participants': ((value['participants'] as Array<any>).map(UserPublicSummaryToJSON)),
        'unreadMessageCount': value['unreadMessageCount'],
        'lastMessage': MessageToJSON(value['lastMessage']),
    };
}

