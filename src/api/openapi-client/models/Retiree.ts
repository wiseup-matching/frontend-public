/* tslint:disable */
/* eslint-disable */
/**
 * Retirement‐Matching API
 * REST endpoints for user auth (via magic‐link), retirees, career elements, reference data, startups, job postings, matching, conversations, and hire invites. Uses a JWT set in a cookie. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { LanguageProficiency } from './LanguageProficiency';
import {
    LanguageProficiencyFromJSON,
    LanguageProficiencyFromJSONTyped,
    LanguageProficiencyToJSON,
    LanguageProficiencyToJSONTyped,
} from './LanguageProficiency';
import type { CareerElement } from './CareerElement';
import {
    CareerElementFromJSON,
    CareerElementFromJSONTyped,
    CareerElementToJSON,
    CareerElementToJSONTyped,
} from './CareerElement';
import type { Notification } from './Notification';
import {
    NotificationFromJSON,
    NotificationFromJSONTyped,
    NotificationToJSON,
    NotificationToJSONTyped,
} from './Notification';

/**
 * 
 * @export
 * @interface Retiree
 */
export interface Retiree {
    /**
     * Unique identifier for any user (retiree or startup).
     * @type {string}
     * @memberof Retiree
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Retiree
     */
    userType?: RetireeUserTypeEnum;
    /**
     * Must be unique; used for magic‐link login.
     * @type {string}
     * @memberof Retiree
     */
    email: string;
    /**
     * (Optional) Stored hash if you ever add password auth. For now, not used.
     * @type {string}
     * @memberof Retiree
     */
    passwordHash?: string | null;
    /**
     * Last name of the retiree/startup user.
     * @type {string}
     * @memberof Retiree
     */
    nameLast: string;
    /**
     * First name of the retiree/startup user.
     * @type {string}
     * @memberof Retiree
     */
    nameFirst: string;
    /**
     * 
     * @type {string}
     * @memberof Retiree
     */
    profilePicture?: string | null;
    /**
     * Date and time when the user was created.
     * @type {Date}
     * @memberof Retiree
     */
    createdAt?: Date;
    /**
     * 
     * @type {Array<Notification>}
     * @memberof Retiree
     */
    notifications?: Array<Notification>;
    /**
     * Whether the retiree data should be obscured when viewed by a startup that has no connection with this retiree. Default is true.
     * @type {boolean}
     * @memberof Retiree
     */
    readonly isObscured?: boolean;
    /**
     * A short bio or ‐About me‐ text.
     * @type {string}
     * @memberof Retiree
     */
    aboutMe?: string | null;
    /**
     * Date of birth.
     * @type {Date}
     * @memberof Retiree
     */
    birthday?: Date | null;
    /**
     * Date when the retiree first retired.
     * @type {Date}
     * @memberof Retiree
     */
    retiredSince?: Date | null;
    /**
     * Desired hourly salary in EUR.
     * @type {number}
     * @memberof Retiree
     */
    expectedHourlySalaryEUR?: number | null;
    /**
     * Desired number of work hours per week.
     * @type {number}
     * @memberof Retiree
     */
    desiredWorkHoursPerWeek?: number | null;
    /**
     * Street address.
     * @type {string}
     * @memberof Retiree
     */
    addressStreet?: string | null;
    /**
     * ZIP/postal code.
     * @type {string}
     * @memberof Retiree
     */
    addressZip?: string | null;
    /**
     * City.
     * @type {string}
     * @memberof Retiree
     */
    addressCity?: string | null;
    /**
     * Country.
     * @type {string}
     * @memberof Retiree
     */
    addressCountry?: string | null;
    /**
     * True if the retiree has finished the onboarding tutorial.
     * @type {boolean}
     * @memberof Retiree
     */
    hasCompletedTutorial: boolean;
    /**
     * Current status the retiree on the platform.
     * @type {string}
     * @memberof Retiree
     */
    status: RetireeStatusEnum;
    /**
     * List of skills (max 10).
     * @type {Array<string>}
     * @memberof Retiree
     */
    skills?: Array<string>;
    /**
     * List of expertise areas (max 5).
     * @type {Array<string>}
     * @memberof Retiree
     */
    expertiseAreas?: Array<string>;
    /**
     * List of language proficiencies.
     * @type {Array<LanguageProficiency>}
     * @memberof Retiree
     */
    languageProficiencies?: Array<LanguageProficiency>;
    /**
     * List of career elements (education and job history).
     * @type {Array<CareerElement>}
     * @memberof Retiree
     */
    careerElements?: Array<CareerElement>;
}


/**
 * @export
 */
export const RetireeUserTypeEnum = {
    Retiree: 'Retiree',
    Startup: 'Startup'
} as const;
export type RetireeUserTypeEnum = typeof RetireeUserTypeEnum[keyof typeof RetireeUserTypeEnum];

/**
 * @export
 */
export const RetireeStatusEnum = {
    Available: 'available',
    Atcapacity: 'atcapacity'
} as const;
export type RetireeStatusEnum = typeof RetireeStatusEnum[keyof typeof RetireeStatusEnum];


/**
 * Check if a given object implements the Retiree interface.
 */
export function instanceOfRetiree(value: object): value is Retiree {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('nameLast' in value) || value['nameLast'] === undefined) return false;
    if (!('nameFirst' in value) || value['nameFirst'] === undefined) return false;
    if (!('hasCompletedTutorial' in value) || value['hasCompletedTutorial'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    return true;
}

export function RetireeFromJSON(json: any): Retiree {
    return RetireeFromJSONTyped(json, false);
}

export function RetireeFromJSONTyped(json: any, ignoreDiscriminator: boolean): Retiree {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['_id'],
        'userType': json['userType'] == null ? undefined : json['userType'],
        'email': json['email'],
        'passwordHash': json['passwordHash'] == null ? undefined : json['passwordHash'],
        'nameLast': json['nameLast'],
        'nameFirst': json['nameFirst'],
        'profilePicture': json['profilePicture'] == null ? undefined : json['profilePicture'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'notifications': json['notifications'] == null ? undefined : ((json['notifications'] as Array<any>).map(NotificationFromJSON)),
        'isObscured': json['isObscured'] == null ? undefined : json['isObscured'],
        'aboutMe': json['aboutMe'] == null ? undefined : json['aboutMe'],
        'birthday': json['birthday'] == null ? undefined : (new Date(json['birthday'])),
        'retiredSince': json['retiredSince'] == null ? undefined : (new Date(json['retiredSince'])),
        'expectedHourlySalaryEUR': json['expectedHourlySalaryEUR'] == null ? undefined : json['expectedHourlySalaryEUR'],
        'desiredWorkHoursPerWeek': json['desiredWorkHoursPerWeek'] == null ? undefined : json['desiredWorkHoursPerWeek'],
        'addressStreet': json['addressStreet'] == null ? undefined : json['addressStreet'],
        'addressZip': json['addressZip'] == null ? undefined : json['addressZip'],
        'addressCity': json['addressCity'] == null ? undefined : json['addressCity'],
        'addressCountry': json['addressCountry'] == null ? undefined : json['addressCountry'],
        'hasCompletedTutorial': json['hasCompletedTutorial'],
        'status': json['status'],
        'skills': json['skills'] == null ? undefined : json['skills'],
        'expertiseAreas': json['expertiseAreas'] == null ? undefined : json['expertiseAreas'],
        'languageProficiencies': json['languageProficiencies'] == null ? undefined : ((json['languageProficiencies'] as Array<any>).map(LanguageProficiencyFromJSON)),
        'careerElements': json['careerElements'] == null ? undefined : ((json['careerElements'] as Array<any>).map(CareerElementFromJSON)),
    };
}

export function RetireeToJSON(json: any): Retiree {
    return RetireeToJSONTyped(json, false);
}

export function RetireeToJSONTyped(value?: Omit<Retiree, 'isObscured'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        '_id': value['id'],
        'userType': value['userType'],
        'email': value['email'],
        'passwordHash': value['passwordHash'],
        'nameLast': value['nameLast'],
        'nameFirst': value['nameFirst'],
        'profilePicture': value['profilePicture'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'notifications': value['notifications'] == null ? undefined : ((value['notifications'] as Array<any>).map(NotificationToJSON)),
        'aboutMe': value['aboutMe'],
        'birthday': value['birthday'] == null ? undefined : ((value['birthday'] as any).toISOString().substring(0,10)),
        'retiredSince': value['retiredSince'] == null ? undefined : ((value['retiredSince'] as any).toISOString().substring(0,10)),
        'expectedHourlySalaryEUR': value['expectedHourlySalaryEUR'],
        'desiredWorkHoursPerWeek': value['desiredWorkHoursPerWeek'],
        'addressStreet': value['addressStreet'],
        'addressZip': value['addressZip'],
        'addressCity': value['addressCity'],
        'addressCountry': value['addressCountry'],
        'hasCompletedTutorial': value['hasCompletedTutorial'],
        'status': value['status'],
        'skills': value['skills'],
        'expertiseAreas': value['expertiseAreas'],
        'languageProficiencies': value['languageProficiencies'] == null ? undefined : ((value['languageProficiencies'] as Array<any>).map(LanguageProficiencyToJSON)),
        'careerElements': value['careerElements'] == null ? undefined : ((value['careerElements'] as Array<any>).map(CareerElementToJSON)),
    };
}

