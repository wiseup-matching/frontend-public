/* tslint:disable */
/* eslint-disable */
/**
 * Retirement‐Matching API
 * REST endpoints for user auth (via magic‐link), retirees, career elements, reference data, startups, job postings, matching, conversations, and hire invites. Uses a JWT set in a cookie. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * Unique identifier for this message.
     * @type {string}
     * @memberof Message
     */
    id: string;
    /**
     * Which Conversation this message belongs to.
     * @type {string}
     * @memberof Message
     */
    conversationId: string;
    /**
     * User ID of who sent it.
     * @type {string}
     * @memberof Message
     */
    senderId: string;
    /**
     * The message text.
     * @type {string}
     * @memberof Message
     */
    content: string;
    /**
     * True if the recipient(s) have read this message.
     * @type {boolean}
     * @memberof Message
     */
    read: boolean;
    /**
     * Timestamp when it was sent.
     * @type {Date}
     * @memberof Message
     */
    createdAt: Date;
}

/**
 * Check if a given object implements the Message interface.
 */
export function instanceOfMessage(value: object): value is Message {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('conversationId' in value) || value['conversationId'] === undefined) return false;
    if (!('senderId' in value) || value['senderId'] === undefined) return false;
    if (!('content' in value) || value['content'] === undefined) return false;
    if (!('read' in value) || value['read'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    return true;
}

export function MessageFromJSON(json: any): Message {
    return MessageFromJSONTyped(json, false);
}

export function MessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): Message {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['_id'],
        'conversationId': json['conversationId'],
        'senderId': json['senderId'],
        'content': json['content'],
        'read': json['read'],
        'createdAt': (new Date(json['createdAt'])),
    };
}

export function MessageToJSON(json: any): Message {
    return MessageToJSONTyped(json, false);
}

export function MessageToJSONTyped(value?: Message | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        '_id': value['id'],
        'conversationId': value['conversationId'],
        'senderId': value['senderId'],
        'content': value['content'],
        'read': value['read'],
        'createdAt': ((value['createdAt']).toISOString()),
    };
}

