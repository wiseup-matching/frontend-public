/* tslint:disable */
/* eslint-disable */
/**
 * Retirement‐Matching API
 * REST endpoints for user auth (via magic‐link), retirees, career elements, reference data, startups, job postings, matching, conversations, and hire invites. Uses a JWT set in a cookie. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Notification } from './Notification';
import {
    NotificationFromJSON,
    NotificationFromJSONTyped,
    NotificationToJSON,
    NotificationToJSONTyped,
} from './Notification';

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * Unique identifier for any user (retiree or startup).
     * @type {string}
     * @memberof User
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    userType?: UserUserTypeEnum;
    /**
     * Must be unique; used for magic‐link login.
     * @type {string}
     * @memberof User
     */
    email: string;
    /**
     * (Optional) Stored hash if you ever add password auth. For now, not used.
     * @type {string}
     * @memberof User
     */
    passwordHash?: string | null;
    /**
     * Last name of the retiree/startup user.
     * @type {string}
     * @memberof User
     */
    nameLast: string;
    /**
     * First name of the retiree/startup user.
     * @type {string}
     * @memberof User
     */
    nameFirst: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    profilePicture?: string | null;
    /**
     * Date and time when the user was created.
     * @type {Date}
     * @memberof User
     */
    createdAt?: Date;
    /**
     * 
     * @type {Array<Notification>}
     * @memberof User
     */
    notifications?: Array<Notification>;
}


/**
 * @export
 */
export const UserUserTypeEnum = {
    Retiree: 'Retiree',
    Startup: 'Startup'
} as const;
export type UserUserTypeEnum = typeof UserUserTypeEnum[keyof typeof UserUserTypeEnum];


/**
 * Check if a given object implements the User interface.
 */
export function instanceOfUser(value: object): value is User {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('nameLast' in value) || value['nameLast'] === undefined) return false;
    if (!('nameFirst' in value) || value['nameFirst'] === undefined) return false;
    return true;
}

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['_id'],
        'userType': json['userType'] == null ? undefined : json['userType'],
        'email': json['email'],
        'passwordHash': json['passwordHash'] == null ? undefined : json['passwordHash'],
        'nameLast': json['nameLast'],
        'nameFirst': json['nameFirst'],
        'profilePicture': json['profilePicture'] == null ? undefined : json['profilePicture'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'notifications': json['notifications'] == null ? undefined : ((json['notifications'] as Array<any>).map(NotificationFromJSON)),
    };
}

export function UserToJSON(json: any): User {
    return UserToJSONTyped(json, false);
}

export function UserToJSONTyped(value?: User | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        '_id': value['id'],
        'userType': value['userType'],
        'email': value['email'],
        'passwordHash': value['passwordHash'],
        'nameLast': value['nameLast'],
        'nameFirst': value['nameFirst'],
        'profilePicture': value['profilePicture'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'notifications': value['notifications'] == null ? undefined : ((value['notifications'] as Array<any>).map(NotificationToJSON)),
    };
}

