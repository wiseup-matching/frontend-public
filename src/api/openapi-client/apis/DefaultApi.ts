/* tslint:disable */
/* eslint-disable */
/**
 * Retirement‐Matching API
 * REST endpoints for user auth (via magic‐link), retirees, career elements, reference data, startups, job postings, matching, conversations, and hire invites. Uses a JWT set in a cookie. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CareerElement,
  CareerElementCreate,
  CareerElementUpdate,
  Conversation,
  ConversationCreate,
  ConversationSummary,
  Cooperation,
  CooperationCreate,
  CooperationUpdate,
  DeferredResponse,
  Degree,
  ExpertiseArea,
  FundingStatus,
  InlineResponse200,
  InlineResponse201,
  JobPosting,
  JobPostingCreate,
  JobPostingUpdate,
  Language,
  LanguageProficiencyLevel,
  LoginRequest,
  LogoutPost200Response,
  Match,
  MatchingRun,
  MatchingRunRequest,
  Message,
  MessageCreate,
  Position,
  RegisterRequest,
  Retiree,
  RetireeUpdate,
  Skill,
  Startup,
  StartupUpdate,
  UploadImage200Response,
  VerifyMagiclinkGet200Response,
} from '../models/index';
import {
    CareerElementFromJSON,
    CareerElementToJSON,
    CareerElementCreateFromJSON,
    CareerElementCreateToJSON,
    CareerElementUpdateFromJSON,
    CareerElementUpdateToJSON,
    ConversationFromJSON,
    ConversationToJSON,
    ConversationCreateFromJSON,
    ConversationCreateToJSON,
    ConversationSummaryFromJSON,
    ConversationSummaryToJSON,
    CooperationFromJSON,
    CooperationToJSON,
    CooperationCreateFromJSON,
    CooperationCreateToJSON,
    CooperationUpdateFromJSON,
    CooperationUpdateToJSON,
    DeferredResponseFromJSON,
    DeferredResponseToJSON,
    DegreeFromJSON,
    DegreeToJSON,
    ExpertiseAreaFromJSON,
    ExpertiseAreaToJSON,
    FundingStatusFromJSON,
    FundingStatusToJSON,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    InlineResponse201FromJSON,
    InlineResponse201ToJSON,
    JobPostingFromJSON,
    JobPostingToJSON,
    JobPostingCreateFromJSON,
    JobPostingCreateToJSON,
    JobPostingUpdateFromJSON,
    JobPostingUpdateToJSON,
    LanguageFromJSON,
    LanguageToJSON,
    LanguageProficiencyLevelFromJSON,
    LanguageProficiencyLevelToJSON,
    LoginRequestFromJSON,
    LoginRequestToJSON,
    LogoutPost200ResponseFromJSON,
    LogoutPost200ResponseToJSON,
    MatchFromJSON,
    MatchToJSON,
    MatchingRunFromJSON,
    MatchingRunToJSON,
    MatchingRunRequestFromJSON,
    MatchingRunRequestToJSON,
    MessageFromJSON,
    MessageToJSON,
    MessageCreateFromJSON,
    MessageCreateToJSON,
    PositionFromJSON,
    PositionToJSON,
    RegisterRequestFromJSON,
    RegisterRequestToJSON,
    RetireeFromJSON,
    RetireeToJSON,
    RetireeUpdateFromJSON,
    RetireeUpdateToJSON,
    SkillFromJSON,
    SkillToJSON,
    StartupFromJSON,
    StartupToJSON,
    StartupUpdateFromJSON,
    StartupUpdateToJSON,
    UploadImage200ResponseFromJSON,
    UploadImage200ResponseToJSON,
    VerifyMagiclinkGet200ResponseFromJSON,
    VerifyMagiclinkGet200ResponseToJSON,
} from '../models/index';

export interface ConversationConversationIdDeleteRequest {
    conversationId: string;
}

export interface ConversationConversationIdGetRequest {
    conversationId: string;
}

export interface ConversationConversationIdMessagePostRequest {
    conversationId: string;
    messageCreate: MessageCreate;
}

export interface ConversationPostRequest {
    conversationCreate: ConversationCreate;
}

export interface CooperationCooperationIdDeleteRequest {
    cooperationId: string;
}

export interface CooperationCooperationIdGetRequest {
    cooperationId: string;
}

export interface CooperationCooperationIdPutRequest {
    cooperationId: string;
    cooperationUpdate: CooperationUpdate;
}

export interface CooperationPostRequest {
    cooperationCreate: CooperationCreate;
}

export interface DegreeDegreeIdGetRequest {
    degreeId: string;
}

export interface ExpertiseAreaExpertiseAreaIdGetRequest {
    expertiseAreaId: string;
}

export interface FundingStatusFundingStatusIdGetRequest {
    fundingStatusId: string;
}

export interface JobPostingJobPostingIdDeleteRequest {
    jobPostingId: string;
}

export interface JobPostingJobPostingIdGetRequest {
    jobPostingId: string;
}

export interface JobPostingJobPostingIdMatchesGetRequest {
    jobPostingId: string;
}

export interface JobPostingJobPostingIdPutRequest {
    jobPostingId: string;
    jobPostingUpdate: JobPostingUpdate;
}

export interface JobPostingPostRequest {
    jobPostingCreate: JobPostingCreate;
}

export interface LoginPostRequest {
    loginRequest: LoginRequest;
}

export interface MatchMatchIdGetRequest {
    matchId: string;
}

export interface PositionPositionIdGetRequest {
    positionId: string;
}

export interface PostConversationConversationIdReadRequest {
    conversationId: string;
    body?: object;
}

export interface RegisterPostRequest {
    registerRequest: RegisterRequest;
}

export interface RetireeRetireeIdCareerElementCareerElementIdDeleteRequest {
    retireeId: string;
    careerElementId: string;
}

export interface RetireeRetireeIdCareerElementCareerElementIdGetRequest {
    retireeId: string;
    careerElementId: string;
}

export interface RetireeRetireeIdCareerElementCareerElementIdPutRequest {
    retireeId: string;
    careerElementId: string;
    careerElementUpdate: CareerElementUpdate;
}

export interface RetireeRetireeIdCareerElementGetRequest {
    retireeId: string;
}

export interface RetireeRetireeIdCareerElementPostRequest {
    retireeId: string;
    careerElementCreate: CareerElementCreate;
}

export interface RetireeRetireeIdDeleteRequest {
    retireeId: string;
}

export interface RetireeRetireeIdGetRequest {
    retireeId: string;
}

export interface RetireeRetireeIdPutRequest {
    retireeId: string;
    retireeUpdate: RetireeUpdate;
}

export interface RunMatchingPostRequest {
    matchingRunRequest: MatchingRunRequest;
}

export interface SkillSkillIdGetRequest {
    skillId: string;
}

export interface StartupStartupIdDeleteRequest {
    startupId: string;
}

export interface StartupStartupIdGetRequest {
    startupId: string;
}

export interface StartupStartupIdPutRequest {
    startupId: string;
    startupUpdate: StartupUpdate;
}

export interface UploadImageRequest {
    image?: Blob;
}

export interface VerifyMagiclinkGetRequest {
    token: string;
    userType: VerifyMagiclinkGetUserTypeEnum;
    strict?: boolean;
    redirect?: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Delete a conversation
     */
    async conversationConversationIdDeleteRaw(requestParameters: ConversationConversationIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['conversationId'] == null) {
            throw new runtime.RequiredError(
                'conversationId',
                'Required parameter "conversationId" was null or undefined when calling conversationConversationIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/conversation/{conversationId}`.replace(`{${"conversationId"}}`, encodeURIComponent(String(requestParameters['conversationId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a conversation
     */
    async conversationConversationIdDelete(requestParameters: ConversationConversationIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.conversationConversationIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get a conversation by ID
     */
    async conversationConversationIdGetRaw(requestParameters: ConversationConversationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Conversation>> {
        if (requestParameters['conversationId'] == null) {
            throw new runtime.RequiredError(
                'conversationId',
                'Required parameter "conversationId" was null or undefined when calling conversationConversationIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/conversation/{conversationId}`.replace(`{${"conversationId"}}`, encodeURIComponent(String(requestParameters['conversationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationFromJSON(jsonValue));
    }

    /**
     * Get a conversation by ID
     */
    async conversationConversationIdGet(requestParameters: ConversationConversationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Conversation> {
        const response = await this.conversationConversationIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send a new message in a conversation
     */
    async conversationConversationIdMessagePostRaw(requestParameters: ConversationConversationIdMessagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Message>> {
        if (requestParameters['conversationId'] == null) {
            throw new runtime.RequiredError(
                'conversationId',
                'Required parameter "conversationId" was null or undefined when calling conversationConversationIdMessagePost().'
            );
        }

        if (requestParameters['messageCreate'] == null) {
            throw new runtime.RequiredError(
                'messageCreate',
                'Required parameter "messageCreate" was null or undefined when calling conversationConversationIdMessagePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/conversation/{conversationId}/message`.replace(`{${"conversationId"}}`, encodeURIComponent(String(requestParameters['conversationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MessageCreateToJSON(requestParameters['messageCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageFromJSON(jsonValue));
    }

    /**
     * Send a new message in a conversation
     */
    async conversationConversationIdMessagePost(requestParameters: ConversationConversationIdMessagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Message> {
        const response = await this.conversationConversationIdMessagePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all conversations
     */
    async conversationGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ConversationSummary>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/conversation`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ConversationSummaryFromJSON));
    }

    /**
     * Get all conversations
     */
    async conversationGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ConversationSummary>> {
        const response = await this.conversationGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create a new conversation
     */
    async conversationPostRaw(requestParameters: ConversationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationSummary>> {
        if (requestParameters['conversationCreate'] == null) {
            throw new runtime.RequiredError(
                'conversationCreate',
                'Required parameter "conversationCreate" was null or undefined when calling conversationPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/conversation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConversationCreateToJSON(requestParameters['conversationCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationSummaryFromJSON(jsonValue));
    }

    /**
     * Create a new conversation
     */
    async conversationPost(requestParameters: ConversationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationSummary> {
        const response = await this.conversationPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a cooperation
     */
    async cooperationCooperationIdDeleteRaw(requestParameters: CooperationCooperationIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['cooperationId'] == null) {
            throw new runtime.RequiredError(
                'cooperationId',
                'Required parameter "cooperationId" was null or undefined when calling cooperationCooperationIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cooperation/{cooperationId}`.replace(`{${"cooperationId"}}`, encodeURIComponent(String(requestParameters['cooperationId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a cooperation
     */
    async cooperationCooperationIdDelete(requestParameters: CooperationCooperationIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.cooperationCooperationIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get a cooperation by ID
     */
    async cooperationCooperationIdGetRaw(requestParameters: CooperationCooperationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Cooperation>> {
        if (requestParameters['cooperationId'] == null) {
            throw new runtime.RequiredError(
                'cooperationId',
                'Required parameter "cooperationId" was null or undefined when calling cooperationCooperationIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cooperation/{cooperationId}`.replace(`{${"cooperationId"}}`, encodeURIComponent(String(requestParameters['cooperationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CooperationFromJSON(jsonValue));
    }

    /**
     * Get a cooperation by ID
     */
    async cooperationCooperationIdGet(requestParameters: CooperationCooperationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Cooperation> {
        const response = await this.cooperationCooperationIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a cooperation (e.g., change status)
     */
    async cooperationCooperationIdPutRaw(requestParameters: CooperationCooperationIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Cooperation>> {
        if (requestParameters['cooperationId'] == null) {
            throw new runtime.RequiredError(
                'cooperationId',
                'Required parameter "cooperationId" was null or undefined when calling cooperationCooperationIdPut().'
            );
        }

        if (requestParameters['cooperationUpdate'] == null) {
            throw new runtime.RequiredError(
                'cooperationUpdate',
                'Required parameter "cooperationUpdate" was null or undefined when calling cooperationCooperationIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/cooperation/{cooperationId}`.replace(`{${"cooperationId"}}`, encodeURIComponent(String(requestParameters['cooperationId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CooperationUpdateToJSON(requestParameters['cooperationUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CooperationFromJSON(jsonValue));
    }

    /**
     * Update a cooperation (e.g., change status)
     */
    async cooperationCooperationIdPut(requestParameters: CooperationCooperationIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Cooperation> {
        const response = await this.cooperationCooperationIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all cooperations
     */
    async cooperationGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Cooperation>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cooperation`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CooperationFromJSON));
    }

    /**
     * Get all cooperations
     */
    async cooperationGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Cooperation>> {
        const response = await this.cooperationGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create a new cooperation
     */
    async cooperationPostRaw(requestParameters: CooperationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Cooperation>> {
        if (requestParameters['cooperationCreate'] == null) {
            throw new runtime.RequiredError(
                'cooperationCreate',
                'Required parameter "cooperationCreate" was null or undefined when calling cooperationPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/cooperation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CooperationCreateToJSON(requestParameters['cooperationCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CooperationFromJSON(jsonValue));
    }

    /**
     * Create a new cooperation
     */
    async cooperationPost(requestParameters: CooperationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Cooperation> {
        const response = await this.cooperationPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get degree by ID
     */
    async degreeDegreeIdGetRaw(requestParameters: DegreeDegreeIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Degree>> {
        if (requestParameters['degreeId'] == null) {
            throw new runtime.RequiredError(
                'degreeId',
                'Required parameter "degreeId" was null or undefined when calling degreeDegreeIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/degree/{degreeId}`.replace(`{${"degreeId"}}`, encodeURIComponent(String(requestParameters['degreeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DegreeFromJSON(jsonValue));
    }

    /**
     * Get degree by ID
     */
    async degreeDegreeIdGet(requestParameters: DegreeDegreeIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Degree> {
        const response = await this.degreeDegreeIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all degrees
     */
    async degreeGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Degree>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/degree`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DegreeFromJSON));
    }

    /**
     * List all degrees
     */
    async degreeGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Degree>> {
        const response = await this.degreeGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get an expertise area by ID
     */
    async expertiseAreaExpertiseAreaIdGetRaw(requestParameters: ExpertiseAreaExpertiseAreaIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExpertiseArea>> {
        if (requestParameters['expertiseAreaId'] == null) {
            throw new runtime.RequiredError(
                'expertiseAreaId',
                'Required parameter "expertiseAreaId" was null or undefined when calling expertiseAreaExpertiseAreaIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/expertise-area/{expertiseAreaId}`.replace(`{${"expertiseAreaId"}}`, encodeURIComponent(String(requestParameters['expertiseAreaId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExpertiseAreaFromJSON(jsonValue));
    }

    /**
     * Get an expertise area by ID
     */
    async expertiseAreaExpertiseAreaIdGet(requestParameters: ExpertiseAreaExpertiseAreaIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExpertiseArea> {
        const response = await this.expertiseAreaExpertiseAreaIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all expertise areas
     */
    async expertiseAreaGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExpertiseArea>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/expertise-area`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExpertiseAreaFromJSON));
    }

    /**
     * List all expertise areas
     */
    async expertiseAreaGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExpertiseArea>> {
        const response = await this.expertiseAreaGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a funding status by ID
     */
    async fundingStatusFundingStatusIdGetRaw(requestParameters: FundingStatusFundingStatusIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FundingStatus>> {
        if (requestParameters['fundingStatusId'] == null) {
            throw new runtime.RequiredError(
                'fundingStatusId',
                'Required parameter "fundingStatusId" was null or undefined when calling fundingStatusFundingStatusIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/funding-status/{fundingStatusId}`.replace(`{${"fundingStatusId"}}`, encodeURIComponent(String(requestParameters['fundingStatusId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FundingStatusFromJSON(jsonValue));
    }

    /**
     * Get a funding status by ID
     */
    async fundingStatusFundingStatusIdGet(requestParameters: FundingStatusFundingStatusIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FundingStatus> {
        const response = await this.fundingStatusFundingStatusIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all funding statuses
     */
    async fundingStatusGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FundingStatus>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/funding-status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FundingStatusFromJSON));
    }

    /**
     * List all funding statuses
     */
    async fundingStatusGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FundingStatus>> {
        const response = await this.fundingStatusGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all job postings
     */
    async jobPostingGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<JobPosting>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/job-posting`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(JobPostingFromJSON));
    }

    /**
     * Get all job postings
     */
    async jobPostingGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<JobPosting>> {
        const response = await this.jobPostingGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Delete a job posting
     */
    async jobPostingJobPostingIdDeleteRaw(requestParameters: JobPostingJobPostingIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['jobPostingId'] == null) {
            throw new runtime.RequiredError(
                'jobPostingId',
                'Required parameter "jobPostingId" was null or undefined when calling jobPostingJobPostingIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/job-posting/{jobPostingId}`.replace(`{${"jobPostingId"}}`, encodeURIComponent(String(requestParameters['jobPostingId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a job posting
     */
    async jobPostingJobPostingIdDelete(requestParameters: JobPostingJobPostingIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.jobPostingJobPostingIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get a job posting by ID
     */
    async jobPostingJobPostingIdGetRaw(requestParameters: JobPostingJobPostingIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobPosting>> {
        if (requestParameters['jobPostingId'] == null) {
            throw new runtime.RequiredError(
                'jobPostingId',
                'Required parameter "jobPostingId" was null or undefined when calling jobPostingJobPostingIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/job-posting/{jobPostingId}`.replace(`{${"jobPostingId"}}`, encodeURIComponent(String(requestParameters['jobPostingId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobPostingFromJSON(jsonValue));
    }

    /**
     * Get a job posting by ID
     */
    async jobPostingJobPostingIdGet(requestParameters: JobPostingJobPostingIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobPosting> {
        const response = await this.jobPostingJobPostingIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all matches for a job posting
     */
    async jobPostingJobPostingIdMatchesGetRaw(requestParameters: JobPostingJobPostingIdMatchesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Match>>> {
        if (requestParameters['jobPostingId'] == null) {
            throw new runtime.RequiredError(
                'jobPostingId',
                'Required parameter "jobPostingId" was null or undefined when calling jobPostingJobPostingIdMatchesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/job-posting/{jobPostingId}/matches`.replace(`{${"jobPostingId"}}`, encodeURIComponent(String(requestParameters['jobPostingId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MatchFromJSON));
    }

    /**
     * Get all matches for a job posting
     */
    async jobPostingJobPostingIdMatchesGet(requestParameters: JobPostingJobPostingIdMatchesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Match>> {
        const response = await this.jobPostingJobPostingIdMatchesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a job posting
     */
    async jobPostingJobPostingIdPutRaw(requestParameters: JobPostingJobPostingIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobPosting>> {
        if (requestParameters['jobPostingId'] == null) {
            throw new runtime.RequiredError(
                'jobPostingId',
                'Required parameter "jobPostingId" was null or undefined when calling jobPostingJobPostingIdPut().'
            );
        }

        if (requestParameters['jobPostingUpdate'] == null) {
            throw new runtime.RequiredError(
                'jobPostingUpdate',
                'Required parameter "jobPostingUpdate" was null or undefined when calling jobPostingJobPostingIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/job-posting/{jobPostingId}`.replace(`{${"jobPostingId"}}`, encodeURIComponent(String(requestParameters['jobPostingId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: JobPostingUpdateToJSON(requestParameters['jobPostingUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobPostingFromJSON(jsonValue));
    }

    /**
     * Update a job posting
     */
    async jobPostingJobPostingIdPut(requestParameters: JobPostingJobPostingIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobPosting> {
        const response = await this.jobPostingJobPostingIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new job posting
     */
    async jobPostingPostRaw(requestParameters: JobPostingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobPosting>> {
        if (requestParameters['jobPostingCreate'] == null) {
            throw new runtime.RequiredError(
                'jobPostingCreate',
                'Required parameter "jobPostingCreate" was null or undefined when calling jobPostingPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/job-posting`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JobPostingCreateToJSON(requestParameters['jobPostingCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobPostingFromJSON(jsonValue));
    }

    /**
     * Create a new job posting
     */
    async jobPostingPost(requestParameters: JobPostingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobPosting> {
        const response = await this.jobPostingPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all languages
     */
    async languageGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Language>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/language`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LanguageFromJSON));
    }

    /**
     * List all languages
     */
    async languageGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Language>> {
        const response = await this.languageGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * List all language proficiency levels
     */
    async languageProficiencyLevelGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LanguageProficiencyLevel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/language-proficiency-level`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LanguageProficiencyLevelFromJSON));
    }

    /**
     * List all language proficiency levels
     */
    async languageProficiencyLevelGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LanguageProficiencyLevel>> {
        const response = await this.languageProficiencyLevelGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Log in by email (immediately returns JWT cookie)
     */
    async loginPostRaw(requestParameters: LoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InlineResponse200>> {
        if (requestParameters['loginRequest'] == null) {
            throw new runtime.RequiredError(
                'loginRequest',
                'Required parameter "loginRequest" was null or undefined when calling loginPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestToJSON(requestParameters['loginRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Log in by email (immediately returns JWT cookie)
     */
    async loginPost(requestParameters: LoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InlineResponse200> {
        const response = await this.loginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logs out the user by clearing all cookies. Always returns { success: true }.
     * Log out user (clear all cookies)
     */
    async logoutPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LogoutPost200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LogoutPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Logs out the user by clearing all cookies. Always returns { success: true }.
     * Log out user (clear all cookies)
     */
    async logoutPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LogoutPost200Response> {
        const response = await this.logoutPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a match by ID
     */
    async matchMatchIdGetRaw(requestParameters: MatchMatchIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Match>> {
        if (requestParameters['matchId'] == null) {
            throw new runtime.RequiredError(
                'matchId',
                'Required parameter "matchId" was null or undefined when calling matchMatchIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/match/{matchId}`.replace(`{${"matchId"}}`, encodeURIComponent(String(requestParameters['matchId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MatchFromJSON(jsonValue));
    }

    /**
     * Get a match by ID
     */
    async matchMatchIdGet(requestParameters: MatchMatchIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Match> {
        const response = await this.matchMatchIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all job positions
     */
    async positionGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Position>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/position`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PositionFromJSON));
    }

    /**
     * List all job positions
     */
    async positionGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Position>> {
        const response = await this.positionGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a job position by ID
     */
    async positionPositionIdGetRaw(requestParameters: PositionPositionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Position>> {
        if (requestParameters['positionId'] == null) {
            throw new runtime.RequiredError(
                'positionId',
                'Required parameter "positionId" was null or undefined when calling positionPositionIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/position/{positionId}`.replace(`{${"positionId"}}`, encodeURIComponent(String(requestParameters['positionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PositionFromJSON(jsonValue));
    }

    /**
     * Get a job position by ID
     */
    async positionPositionIdGet(requestParameters: PositionPositionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Position> {
        const response = await this.positionPositionIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Mark conversation as read
     */
    async postConversationConversationIdReadRaw(requestParameters: PostConversationConversationIdReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['conversationId'] == null) {
            throw new runtime.RequiredError(
                'conversationId',
                'Required parameter "conversationId" was null or undefined when calling postConversationConversationIdRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/conversation/{conversationId}/read`.replace(`{${"conversationId"}}`, encodeURIComponent(String(requestParameters['conversationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Mark conversation as read
     */
    async postConversationConversationIdRead(requestParameters: PostConversationConversationIdReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postConversationConversationIdReadRaw(requestParameters, initOverrides);
    }

    /**
     * Register by email (create user and return JWT cookie)
     */
    async registerPostRaw(requestParameters: RegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InlineResponse201>> {
        if (requestParameters['registerRequest'] == null) {
            throw new runtime.RequiredError(
                'registerRequest',
                'Required parameter "registerRequest" was null or undefined when calling registerPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterRequestToJSON(requestParameters['registerRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse201FromJSON(jsonValue));
    }

    /**
     * Register by email (create user and return JWT cookie)
     */
    async registerPost(requestParameters: RegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InlineResponse201> {
        const response = await this.registerPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all retirees
     */
    async retireeGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Retiree>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/retiree`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RetireeFromJSON));
    }

    /**
     * Get all retirees
     */
    async retireeGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Retiree>> {
        const response = await this.retireeGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Delete a specific career element
     */
    async retireeRetireeIdCareerElementCareerElementIdDeleteRaw(requestParameters: RetireeRetireeIdCareerElementCareerElementIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['retireeId'] == null) {
            throw new runtime.RequiredError(
                'retireeId',
                'Required parameter "retireeId" was null or undefined when calling retireeRetireeIdCareerElementCareerElementIdDelete().'
            );
        }

        if (requestParameters['careerElementId'] == null) {
            throw new runtime.RequiredError(
                'careerElementId',
                'Required parameter "careerElementId" was null or undefined when calling retireeRetireeIdCareerElementCareerElementIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/retiree/{retireeId}/career-element/{careerElementId}`.replace(`{${"retireeId"}}`, encodeURIComponent(String(requestParameters['retireeId']))).replace(`{${"careerElementId"}}`, encodeURIComponent(String(requestParameters['careerElementId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a specific career element
     */
    async retireeRetireeIdCareerElementCareerElementIdDelete(requestParameters: RetireeRetireeIdCareerElementCareerElementIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.retireeRetireeIdCareerElementCareerElementIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get a specific career element by ID (returns education or job subtype)
     */
    async retireeRetireeIdCareerElementCareerElementIdGetRaw(requestParameters: RetireeRetireeIdCareerElementCareerElementIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CareerElement>> {
        if (requestParameters['retireeId'] == null) {
            throw new runtime.RequiredError(
                'retireeId',
                'Required parameter "retireeId" was null or undefined when calling retireeRetireeIdCareerElementCareerElementIdGet().'
            );
        }

        if (requestParameters['careerElementId'] == null) {
            throw new runtime.RequiredError(
                'careerElementId',
                'Required parameter "careerElementId" was null or undefined when calling retireeRetireeIdCareerElementCareerElementIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/retiree/{retireeId}/career-element/{careerElementId}`.replace(`{${"retireeId"}}`, encodeURIComponent(String(requestParameters['retireeId']))).replace(`{${"careerElementId"}}`, encodeURIComponent(String(requestParameters['careerElementId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CareerElementFromJSON(jsonValue));
    }

    /**
     * Get a specific career element by ID (returns education or job subtype)
     */
    async retireeRetireeIdCareerElementCareerElementIdGet(requestParameters: RetireeRetireeIdCareerElementCareerElementIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CareerElement> {
        const response = await this.retireeRetireeIdCareerElementCareerElementIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a specific career element (must include kind ‘education’ or ‘job’)
     */
    async retireeRetireeIdCareerElementCareerElementIdPutRaw(requestParameters: RetireeRetireeIdCareerElementCareerElementIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CareerElement>> {
        if (requestParameters['retireeId'] == null) {
            throw new runtime.RequiredError(
                'retireeId',
                'Required parameter "retireeId" was null or undefined when calling retireeRetireeIdCareerElementCareerElementIdPut().'
            );
        }

        if (requestParameters['careerElementId'] == null) {
            throw new runtime.RequiredError(
                'careerElementId',
                'Required parameter "careerElementId" was null or undefined when calling retireeRetireeIdCareerElementCareerElementIdPut().'
            );
        }

        if (requestParameters['careerElementUpdate'] == null) {
            throw new runtime.RequiredError(
                'careerElementUpdate',
                'Required parameter "careerElementUpdate" was null or undefined when calling retireeRetireeIdCareerElementCareerElementIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/retiree/{retireeId}/career-element/{careerElementId}`.replace(`{${"retireeId"}}`, encodeURIComponent(String(requestParameters['retireeId']))).replace(`{${"careerElementId"}}`, encodeURIComponent(String(requestParameters['careerElementId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CareerElementUpdateToJSON(requestParameters['careerElementUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CareerElementFromJSON(jsonValue));
    }

    /**
     * Update a specific career element (must include kind ‘education’ or ‘job’)
     */
    async retireeRetireeIdCareerElementCareerElementIdPut(requestParameters: RetireeRetireeIdCareerElementCareerElementIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CareerElement> {
        const response = await this.retireeRetireeIdCareerElementCareerElementIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all career elements for a retiree
     */
    async retireeRetireeIdCareerElementGetRaw(requestParameters: RetireeRetireeIdCareerElementGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CareerElement>>> {
        if (requestParameters['retireeId'] == null) {
            throw new runtime.RequiredError(
                'retireeId',
                'Required parameter "retireeId" was null or undefined when calling retireeRetireeIdCareerElementGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/retiree/{retireeId}/career-element`.replace(`{${"retireeId"}}`, encodeURIComponent(String(requestParameters['retireeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CareerElementFromJSON));
    }

    /**
     * Get all career elements for a retiree
     */
    async retireeRetireeIdCareerElementGet(requestParameters: RetireeRetireeIdCareerElementGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CareerElement>> {
        const response = await this.retireeRetireeIdCareerElementGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a career element (must supply kind (‐education‐ or ‐job‐))
     */
    async retireeRetireeIdCareerElementPostRaw(requestParameters: RetireeRetireeIdCareerElementPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CareerElement>> {
        if (requestParameters['retireeId'] == null) {
            throw new runtime.RequiredError(
                'retireeId',
                'Required parameter "retireeId" was null or undefined when calling retireeRetireeIdCareerElementPost().'
            );
        }

        if (requestParameters['careerElementCreate'] == null) {
            throw new runtime.RequiredError(
                'careerElementCreate',
                'Required parameter "careerElementCreate" was null or undefined when calling retireeRetireeIdCareerElementPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/retiree/{retireeId}/career-element`.replace(`{${"retireeId"}}`, encodeURIComponent(String(requestParameters['retireeId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CareerElementCreateToJSON(requestParameters['careerElementCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CareerElementFromJSON(jsonValue));
    }

    /**
     * Create a career element (must supply kind (‐education‐ or ‐job‐))
     */
    async retireeRetireeIdCareerElementPost(requestParameters: RetireeRetireeIdCareerElementPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CareerElement> {
        const response = await this.retireeRetireeIdCareerElementPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a retiree
     */
    async retireeRetireeIdDeleteRaw(requestParameters: RetireeRetireeIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['retireeId'] == null) {
            throw new runtime.RequiredError(
                'retireeId',
                'Required parameter "retireeId" was null or undefined when calling retireeRetireeIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/retiree/{retireeId}`.replace(`{${"retireeId"}}`, encodeURIComponent(String(requestParameters['retireeId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a retiree
     */
    async retireeRetireeIdDelete(requestParameters: RetireeRetireeIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.retireeRetireeIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get a retiree by ID
     */
    async retireeRetireeIdGetRaw(requestParameters: RetireeRetireeIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Retiree>> {
        if (requestParameters['retireeId'] == null) {
            throw new runtime.RequiredError(
                'retireeId',
                'Required parameter "retireeId" was null or undefined when calling retireeRetireeIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/retiree/{retireeId}`.replace(`{${"retireeId"}}`, encodeURIComponent(String(requestParameters['retireeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetireeFromJSON(jsonValue));
    }

    /**
     * Get a retiree by ID
     */
    async retireeRetireeIdGet(requestParameters: RetireeRetireeIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Retiree> {
        const response = await this.retireeRetireeIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a retiree
     */
    async retireeRetireeIdPutRaw(requestParameters: RetireeRetireeIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Retiree>> {
        if (requestParameters['retireeId'] == null) {
            throw new runtime.RequiredError(
                'retireeId',
                'Required parameter "retireeId" was null or undefined when calling retireeRetireeIdPut().'
            );
        }

        if (requestParameters['retireeUpdate'] == null) {
            throw new runtime.RequiredError(
                'retireeUpdate',
                'Required parameter "retireeUpdate" was null or undefined when calling retireeRetireeIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/retiree/{retireeId}`.replace(`{${"retireeId"}}`, encodeURIComponent(String(requestParameters['retireeId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RetireeUpdateToJSON(requestParameters['retireeUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetireeFromJSON(jsonValue));
    }

    /**
     * Update a retiree
     */
    async retireeRetireeIdPut(requestParameters: RetireeRetireeIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Retiree> {
        const response = await this.retireeRetireeIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Start a new matching process for a job posting
     */
    async runMatchingPostRaw(requestParameters: RunMatchingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MatchingRun>> {
        if (requestParameters['matchingRunRequest'] == null) {
            throw new runtime.RequiredError(
                'matchingRunRequest',
                'Required parameter "matchingRunRequest" was null or undefined when calling runMatchingPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/run-matching`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MatchingRunRequestToJSON(requestParameters['matchingRunRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MatchingRunFromJSON(jsonValue));
    }

    /**
     * Start a new matching process for a job posting
     */
    async runMatchingPost(requestParameters: RunMatchingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MatchingRun> {
        const response = await this.runMatchingPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all skills
     */
    async skillGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Skill>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/skill`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SkillFromJSON));
    }

    /**
     * List all skills
     */
    async skillGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Skill>> {
        const response = await this.skillGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a skill by ID
     */
    async skillSkillIdGetRaw(requestParameters: SkillSkillIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Skill>> {
        if (requestParameters['skillId'] == null) {
            throw new runtime.RequiredError(
                'skillId',
                'Required parameter "skillId" was null or undefined when calling skillSkillIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/skill/{skillId}`.replace(`{${"skillId"}}`, encodeURIComponent(String(requestParameters['skillId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SkillFromJSON(jsonValue));
    }

    /**
     * Get a skill by ID
     */
    async skillSkillIdGet(requestParameters: SkillSkillIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Skill> {
        const response = await this.skillSkillIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all startups
     */
    async startupGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Startup>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/startup`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StartupFromJSON));
    }

    /**
     * Get all startups
     */
    async startupGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Startup>> {
        const response = await this.startupGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Delete a startup
     */
    async startupStartupIdDeleteRaw(requestParameters: StartupStartupIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['startupId'] == null) {
            throw new runtime.RequiredError(
                'startupId',
                'Required parameter "startupId" was null or undefined when calling startupStartupIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/startup/{startupId}`.replace(`{${"startupId"}}`, encodeURIComponent(String(requestParameters['startupId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a startup
     */
    async startupStartupIdDelete(requestParameters: StartupStartupIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.startupStartupIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get a startup by ID
     */
    async startupStartupIdGetRaw(requestParameters: StartupStartupIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Startup>> {
        if (requestParameters['startupId'] == null) {
            throw new runtime.RequiredError(
                'startupId',
                'Required parameter "startupId" was null or undefined when calling startupStartupIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/startup/{startupId}`.replace(`{${"startupId"}}`, encodeURIComponent(String(requestParameters['startupId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StartupFromJSON(jsonValue));
    }

    /**
     * Get a startup by ID
     */
    async startupStartupIdGet(requestParameters: StartupStartupIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Startup> {
        const response = await this.startupStartupIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a startup
     */
    async startupStartupIdPutRaw(requestParameters: StartupStartupIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Startup>> {
        if (requestParameters['startupId'] == null) {
            throw new runtime.RequiredError(
                'startupId',
                'Required parameter "startupId" was null or undefined when calling startupStartupIdPut().'
            );
        }

        if (requestParameters['startupUpdate'] == null) {
            throw new runtime.RequiredError(
                'startupUpdate',
                'Required parameter "startupUpdate" was null or undefined when calling startupStartupIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/startup/{startupId}`.replace(`{${"startupId"}}`, encodeURIComponent(String(requestParameters['startupId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StartupUpdateToJSON(requestParameters['startupUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StartupFromJSON(jsonValue));
    }

    /**
     * Update a startup
     */
    async startupStartupIdPut(requestParameters: StartupStartupIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Startup> {
        const response = await this.startupStartupIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload an image
     */
    async uploadImageRaw(requestParameters: UploadImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadImage200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['image'] != null) {
            formParams.append('image', requestParameters['image'] as any);
        }

        const response = await this.request({
            path: `/image/upload`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadImage200ResponseFromJSON(jsonValue));
    }

    /**
     * Upload an image
     */
    async uploadImage(requestParameters: UploadImageRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadImage200Response> {
        const response = await this.uploadImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify magic link token and authenticate user
     */
    async verifyMagiclinkGetRaw(requestParameters: VerifyMagiclinkGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VerifyMagiclinkGet200Response>> {
        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling verifyMagiclinkGet().'
            );
        }

        if (requestParameters['userType'] == null) {
            throw new runtime.RequiredError(
                'userType',
                'Required parameter "userType" was null or undefined when calling verifyMagiclinkGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        if (requestParameters['userType'] != null) {
            queryParameters['userType'] = requestParameters['userType'];
        }

        if (requestParameters['strict'] != null) {
            queryParameters['strict'] = requestParameters['strict'];
        }

        if (requestParameters['redirect'] != null) {
            queryParameters['redirect'] = requestParameters['redirect'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/verify-magiclink`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VerifyMagiclinkGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Verify magic link token and authenticate user
     */
    async verifyMagiclinkGet(requestParameters: VerifyMagiclinkGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VerifyMagiclinkGet200Response> {
        const response = await this.verifyMagiclinkGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VerifyMagiclinkGetUserTypeEnum = {
    Retiree: 'retiree',
    Startup: 'startup',
    Auto: 'auto'
} as const;
export type VerifyMagiclinkGetUserTypeEnum = typeof VerifyMagiclinkGetUserTypeEnum[keyof typeof VerifyMagiclinkGetUserTypeEnum];
